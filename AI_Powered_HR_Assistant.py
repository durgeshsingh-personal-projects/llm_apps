# -*- coding: utf-8 -*-
"""Course-End-Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JhDpPttEgXYNztn2dhHcLA3MQFzdc3uK
"""

#!pip install -U langchain-community
#!pip install pypdf
#!pip install faiss-cpu

import openai
from langchain.document_loaders import PyPDFLoader

Doc_loader = PyPDFLoader("/content/1728286846_the_nestle_hr_policy_pdf_2012.pdf")
extracted_text = Doc_loader.load()

from langchain.text_splitter import RecursiveCharacterTextSplitter
text_splitter  = RecursiveCharacterTextSplitter(
    chunk_size=150,
    chunk_overlap=50,
    separators=["\n\n", "\n", "(?<=\. )", " ", ""]
)
splitted_text=text_splitter.split_documents(extracted_text)

from langchain.embeddings import OpenAIEmbeddings


# Initialize OpenAIEmbeddings with the API key
embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)

from langchain.vectorstores import FAISS

vectordb = FAISS.from_documents(
    documents=splitted_text,
    embedding=embeddings
)

from langchain.chat_models import ChatOpenAI
from google.colab import userdata

llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0, openai_api_key=openai_api_key)

from langchain.chains import RetrievalQA
Retriever_chain = RetrievalQA.from_chain_type(llm,
                                       retriever=vectordb.as_retriever(),
                                       return_source_documents=True,
                                       )

import time

while True:
        query = input("\nEnter a query: ")
        if query == "exit":
            break
        if query.strip() == "":
            continue


        start = time.time()

        res=Retriever_chain(query)




        end = time.time()
        print("\n\n> Question:")

        print(query)

        print(f"\n> Answer (took {round(end - start, 2)} s.):")

        print(res['result'])

import gradio as gr
import time


def Retriever_chain(query):

    return {"result": f"'{res['result']}' " }


def get_response(query):
    if query.strip() == "":
        return "Please enter a valid query."

    start = time.time()
    res = Retriever_chain(query)

    end = time.time()

    result = (
        f"**Question:** {query}\n\n"
        f"**Answer (took {round(end - start, 2)} s.):**\n"
        f"{res['result']}"
    )
    return result


demo = gr.Interface(
    fn=get_response,
    inputs=gr.Textbox(lines=2, placeholder="Enter your query here..."),
    outputs=gr.Markdown(),
    title="Nestleâ€™s HR QA",
    description="Ask your question and get an answer"
)

demo.launch()
